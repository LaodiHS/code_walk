{".env":"PORT='8080'\nHost='http://localhost:'\n","app.js":"import express from \"express\";\n\nimport router from \"./router/router.js\";\n\nimport { Load_Balancer } from \"./services/load_balancer.js\"\n\nimport { create_tables } from \"./services/database_services.js\";\n\nimport { application_service } from \"./services/application_service.js\";\n\nimport { express_apps, pivot_server, database_tables } from \"./config.js\";\n\n\nasync function start_server() {\n\n    await create_tables(database_tables);\n\n    const applications = express_apps();\n\n    for (const application of applications) {\n        \n        const app = express();\n\n        const [app_name, host] = application;\n        \n        application_service(app_name, app);\n\n        app.listen(host.port, () => {\n\n            console.log(`Listening on ${host.port}`);\n\n        })\n\n        router(app);\n    }\n\n    const balancer = new Load_Balancer(Object.values(applications).map(app => app.name + app.host), pivot_server.name, pivot_server.port);\n\n    balancer.start();\n\n}\n\nstart_server();\n","config.js":"import dot from \"dotenv\";\n\n/**\n * \n * @returns {Map<String, Number>} name, port\n */\n\n\nexport const database_tables = [\"users\", \"logs\", \"table_one\", \"table_two\"];\n\nexport const pivot_server = {name:\"http://localhost:\", port:9000}\n\nexport function express_apps() {\n\n    const env = dot.config().parsed;\n\n    const port = process.env.PORT || env.Port || 8080;\n\n    const express_apps = new Map( [ [\"app_\", { name: \"http://localhost:\", port : (port || 8080)} ]  ] );\n\n    return express_apps;\n\n}\n\n","package.json":"{\n  \"type\": \"module\",\n  \"name\": \"Hasan_API\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Rest API Framework\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"nvm\": \"node -v > .nvmrc\",\n    \"test\": \"node unit_tests/unit_tests.js\"\n  },\n  \"keywords\": [\n    \"controller\",\n    \"services\",\n    \"views\",\n    \"validation\",\n    \"test\",\n    \"Static routes\",\n    \"Dynamic routes\"\n  ],\n  \"author\": \"Hasan Seirafi\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"^0.27.2\",\n    \"bluebird\": \"^3.7.2\",\n    \"body-parser\": \"^1.20.0\",\n    \"compression\": \"^1.7.4\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"dotenv\": \"^16.0.1\",\n    \"express-handlebars\": \"^6.0.6\",\n    \"express-minify\": \"^1.0.0\",\n    \"express-session\": \"^1.17.3\",\n    \"express-validate\": \"0.0.8\",\n    \"express-validator\": \"^6.14.2\",\n\n    \"multer\": \"^1.4.5-lts.1\",\n    \"passport\": \"^0.6.0\",\n    \"passport-local\": \"^1.0.0\",\n    \"request\": \"^2.88.2\",\n    \"serve-static\": \"^1.15.0\",\n    \"simple-test-framework\": \"^0.1.7\",\n    \"static-server\": \"^2.2.1\",\n    \"uglify-es\": \"^3.3.9\"\n  },\n  \"devDependencies\": {\n    \"@web/dev-server\": \"^0.1.32\"\n  }\n}\n","controllers/api_controller.js":"\nimport { success, errors, validate } from \"../services/response_service.js\"\nimport { response } from \"../services/response_service.js\";\n\n/**\n * \n * @desc  controller for a view\n * @param {Object} res; \n * @param {Object} req; \n * @returns {Object};  {status, data}\n */\nexport async function select_user_id_controller(req, res) {\n\n    const { url, selector } = req.body; \n\n let status = 200; let data = { myData: [1,2,3,4] };\n   \nreturn {status, data};\n\n};","controllers/multer_image_controller.js":"\nimport {file_system} from \"../modules/file_system.js\";\nimport { get_application_router } from \"../services/application_service.js\";\nimport multer from \"multer\";\n\n/**\n *\n *\n * @export\n * @param {String} path\n * @param {Number} image_size\n * @param {Array<String>} image_extensions\n * @param {String} directory_name\n * @param {String} prefix\n */\nexport async function multer_image_controller(app,path, image_size, image_extensions, directory_name, prefix) {\nconst { root_dir, join } = file_system()\n\n\nconst upload_multer_object = multer({\n      limits: { fileSize: 10000000 },\n      fileFilter(req, file, cb) {\n        if (!file.originalname.match(/\\.(image_extensions.join(\"|\"))$/)) {\n          return\n          cb(new Error('Please upload a valid image file'))\n        }\n        cb(undefined, true)\n      }\n    })\n\n    \napp.post(path, upload_multer_object.array('files') , async (req, res) => {\n  const files = req.files\n  while (files.length) {\n    try {\n      const file = files.shift()\n      await sharp(file.buffer).resize({ width: 250, height: 250 }).png().toFile(__dirname() + `/${directory_name}/${file.originalname + prefix}`)\n      res.status(201).send('Image uploaded successful')\n    } catch (error) {\n      console.log(error)\n      res.status(400).send(error)\n    }\n  }\n})\n}\n\n\n","controllers/user_controller.js":"import { DB } from \"../services/database_services.js\";\n\n/**\n * \n * @dec adds a user into a users json file\n * @param {Object} res \n * @param {Object} req \n * @returns {Object} {code:201, message:{data:`${username} created`}}\n */\nexport async function user_registration_controller({ name, email, username, password }) {\n\n  try {\n    await DB.get_table(\"users\")\n    const id = DB.table.length\n    DB.table.push({ id: id, name: name, email, username, password })\n    const success = await DB.save();\n    if (success) {\n      return { code: 201, message: { data: `${username} created` } };\n    }\n  } catch (errors) {\n\n    return { code: 500, message: { data: errors } }\n  }\n\n\n}\n\n\n","public/index.js":"\ndocument.addEventListener(\"DOMContentLoaded\", async ()=>{\n\nconst response = await axios.post(`http://localhost:8080/api`, { url: \"http://youtube.com\", selector: \"#root_element\" })\n\nconst result = await response.data;\n\nconsole.log(\"result\", result);\n\n\n})","router/express_config.js":"import compression from \"compression\"\n\nimport express from \"express\"\nimport express_session from \"express-session\"\nimport minify from \"express-minify\"\n\nimport { create } from \"express-handlebars\";\n\nimport passport from \"passport\"\n\nimport body_parser from \"body-parser\"\nimport cookie_parser from \"cookie-parser\"\n\nimport uglifyEs from \"uglify-es\"\n\n\nimport { file_system } from \"../modules/file_system.js\";\n\n\nconst { join, root_dir } = file_system()\n\n/**\n * \n * @export\n * @param {Object} app; application Object \n */\n\n\n\nexport default async function express_configuration(app) {\n\n    app.use( express.json() );\n\n    app.use( compression() );\n\n    app.use(minify({\n\n        cache: join(root_dir, \"cache\"),\n        uglifyJsModule: uglifyEs,\n        errorHandler: true,\n        jsMatch: /javascript/,\n        cssMatch: /css/,\n        jsonMatch: /json/,\n        sassMatch: /scss/,\n        lessMatch: /less/,\n        stylusMatch: /stylus/,\n        coffeeScriptMatch: /coffeescript/,\n        \n    }));\n\n\n\n\n\n    app.use( cookie_parser() );\n    \n    app.use(body_parser.urlencoded(\n\n        { extended: true }\n        \n        ));\n\n    app.use(express_session(\n        \n        { secret: \"keyboard cat\", resave: true, saveUninitialized: true }\n        \n        ));\n\n\n    app.use( passport.initialize() );\n\n    app.use( passport.session() );\n    \n  \n\n\n    const hbs = create({ /* config */ });\n    \n    app.engine(\"handlebars\", hbs.engine);\n\n    app.enable(\"view cache\");\n\n    app.set(\"view engine\", \"handlebars\");\n    \n    app.set(\"views\", \"./templates\");\n\n    \n\n};\n\n","router/router.js":"\nimport static_routes from \"./static_routes/static_routes.js\";\nimport dynamic_routes from \"./dynamic_routes/dynamic_routes.js\"\nimport express_configuration from \"./express_config.js\";\nimport { get_application_router } from \"../services/application_service.js\"\n\n\n\nexport default async function router(app) {\n\nawait express_configuration(app);\n\n    static_routes(app);\n\n    dynamic_routes(app);\n\n}; ","services/application_service.js":"const application_map = new Map()\n\n/**\n *\n * @desc to initialize more than then express instance\n * @export\n * @param {String} app_name application instance\n * @param {Object} express_instance express app instance\n */\nexport function application_service(app_name, express_instance) {\n\n    application_map.set(app_name, express_instance)\n\n}\n\n/**\n * @desc retrieves the host application from a map of applications \n * @export\n * @param {String} express_app_name \n * @returns {Object} express app instance\n */\nexport function get_application_router(express_app_name) {\n\n    return application_map.get(express_app_name)\n\n}","services/crypt.js":"import crypto from \"crypto\";\n\n/**\n * generates random string of characters i.e salt\n *\n * @param {number} length - Length of the random string.\n */\n\n  function gen_random_string(length) {\n    \n    return crypto.randomBytes(Math.ceil(length / 2))\n      \n    .toString(\"hex\") /** convert to hexadecimal format */\n      \n    .slice(0, length); /** return required number of characters */\n  \n  }\n\n  /**\n   * hash password with sha512.\n   * \n   * @param {string} password - List of required fields.\n   * @param {string} salt - Data to be validated.\n   */\n  function sha512(password, salt) {\n\n    var hash = crypto.createHmac(\n      \"sha512\",\n      salt\n    );\n\n     /** Hashing algorithm sha512 */\n\n    hash.update(password);\n    \n    var value = hash.digest(\"hex\");\n    \n    return { salt: salt, passwordHash: value };\n  \n  }\n\n export function is_valid(HashedPassword, unsaltedPassword, passwordSalt) {\n  \n  return (\n  \n    HashedPassword === sha512(unsaltedPassword, passwordSalt).passwordHash\n  \n    );\n  }\n\n  export function get_hash( unsaltedPassword, passwordSalt) {\n    \n      return sha512(unsaltedPassword, passwordSalt).passwordHash\n    \n  }\n\nexport function salt_hash_password(userpassword) {\n  \n  var salt = gen_random_string(16); \n    \n    /** Gives us salt of length 16 */\n\n    var passwordData = sha512(userpassword, salt);\n  \n    return {\n  \n      hash: passwordData.passwordHash,\n  \n      salt: passwordData.salt\n  \n    };\n\n  }\n\n\n\n\n\n","services/database_services.js":"import { Data_Base } from \"../modules/database_interface.js\";\n\n\n/**\n * \n * @dsc Instantiates a Data_Base interface before application starts\n * File System Object\n */\nexport let DB;\n \n/**\n * \n * @dsc create tables if they do not exist\n * @param {Array <Strings>} table_names \n */\nexport async function create_tables(table_names) {\n\n    DB = await Data_Base.set_tables(table_names);\n    \n}\n\n\n\n\n","services/error_logging_service.js":"\nimport { file_append } from \"../modules/file_system.js\";\n\n\n\n/**\n * @dec logs errors to a file\n * @param {String} error_type; \n * @param {Date:String} error_date; \n * @param {Object} error_data; \n */\nexport async function error_logging_service(error_type, error_date, error_data) {\n\n    try {\n        \n        await file_append(\"db/error_log.txt\", \n        JSON.stringify( { [error_type] : { [error_date] : error_data } }), \n        { encoding: \"utf8\" } );\n\n    } catch (error) {\n        \n        return error;\n\n    }\n\n    return 'success';\n\n}\n\n\n\n","services/load_balancer.js":"import express from \"express\"\nimport request from \"request\"\n\nimport { get_application_router } from \"./application_service.js\";\n\nexport class Load_Balancer {\n\n        constructor(servers, host, port) {\n\n                this.servers = servers;\n                \n                this.current_server = 0;\n\n                this.pivot_port = port;\n\n                this.pivot = host;\n        \n        }\n        \n        handler(req, res) {\n\n                const _req = request({ url: this.servers[this.current_server] + req.url }).on(\"error\", error => {\n\n                        res.status(500).send(error.message);\n                })\n\n                req.pipe(_req).pipe(res);\n\n                this.current_server = (this.current_server + 1) % this.servers.length;\n\n        }\n        \n        main_route() {\n\n                if (this.servers > 1) {\n\n                        this.pivot = express();\n\n                        this.pivot.get(\"*\", this.handler).post(\"*\", this.handler);\n\n                        this.pivot.listen(this.pivot_port, () => {\n\n                                console.log(`pivot server is listening on ${this.pivot_port}`);\n\n                        })\n                }\n\n        }\n        start(){\n\n         this.main_route();\n\n        }\n\n}","services/passport_services.js":"import passport from \"passport\";\nimport passport_local from \"passport-local\"\nimport crypto from \"crypto\"\nimport DB from \"./database_services.js\";\n\nimport { response } from \"../services/response_service.js\";\n\npassport.use(new passport_local((username, password, cb) => {\n    \n    try {\n        \n        DB.get(\"users\");\n\n    } catch (err) {\n        \n        return cb(err)\n    \n    }\n\n    let user_object;\n\n    for (const user of DB.table) {\n    \n        if (user.username === username) {\n            \n            user_object = user;\n            \n            break;\n        \n        }\n\n    }\n\n    if (!user_object) {\n\n        return cb(null, false, { message: \"Incorrect username or password\" });\n\n    };\n\n    const { hashed_password, salt } = user_object;\n\n    crypto.pbkdf2(password, salt, 310000, 32, \"sha256\", (err, hashedPassword) => {\n\n\n        if (!crypto.timingSafeEqual(hashed_password, hashedPassword)) {\n\n            return cb(null, false, { message: \"Incorrect username or password.\" });\n\n        };\n\n        return cb(null, user_object);\n\n    });\n\n}))","services/response_service.js":"import { validationResult } from \"express-validator\"\n\nimport { error_logging_service } from \"./error_logging_service.js\"\n\nconst response_codes = { \n    200: \"ok\",\n    201: \"ok_created\",\n    304: \"not_modified\",\n    400: \"bad_request\",\n    401: \"unauthorized\",\n    500: \"internal_server_err\"\n};\n\n/**\n *\n *\n * @export\n * @param {Object} req; request Object\n * @param {Object} res; response Object\n * @param {String} code; named status code\n * @param {Object | Array} data; success | error\n */\nexport async function response(res, code, data) {\n\n    try {\n\n        if (response_codes[code]) {\n\n            return res.status(code).json({ message: response_codes[code], data: data });\n\n        }\n\n            throw new Error({ type: \"no_code\", date: Date.now(), request: req });\n\n    } catch (error) {\n\n        try {\n\n            await error_logging_service(error.type, error.date, error.request);\n\n        } catch (error) {\n\n            console.log(error);\n\n        }\n\n    }\n\n}\n\n\n/**\n *\n * @desc Send success response\n * @export\n * @param {String} message;\n * @param {Object Array} results;\n * @param {Number} status_code;\n * @return {Object} success Object;\n */\nexport function success(message, results, status_code) {\n\n    return {\n\n        message,\n\n        error: false,\n\n        code: status_code,\n\n        results\n\n    }\n}\n\n/**\n *\n * @desc send error response\n * @export\n * @param {String} message;\n * @param {Number} statusCode;\n * @return {Object<String,Number,Boolean>}; error\n */\nexport function errors(message, statusCode) {\n\n    const codes = [200, 201, 401, 404, 403, 422, 500];\n\n    let code;\n\n    while (codes.length) {\n    \n        code = codes.pop();\n    \n        if (code === statusCode) break;\n    \n    }\n    \n    code = code || 500;\n\n    return {\n    \n        message,\n    \n        code: code,\n    \n        error: true\n    }\n\n}\n\n/**\n * \n * @param {Object} req; \n * @param {Object} res;\n * @param {Object} next; \n * @returns \n */\nexport function validate(req, res, next) {\n\n    try {\n    \n        validationResult(req).throw();\n\n     if(next){\n\n       return next();\n\n     }\n\n    } catch (errors) {\n\n        return res.status(400).json({message:response_codes[400], errors: errors.array() });\n\n    }\n\n}\n\n\n\nexport class GeneralError extends Error {\n/**\n * \n * \n * @param {String} message; \n */\n    constructor(message){\n\n        super();\n\n        this.message = message;\n    }\n\n    getCode(){\n\n        if(this instanceof BadRequest){\n            \n            return 400;\n\n        }if(this instanceof NotFound){\n            \n            return 404;\n\n        }\n        \n        return 500;\n    }\n\n}\n\nexport class BadRequest extends GeneralError{};\nexport class NotFound extends GeneralError{};\n\nexport const handleErrors = (err,req, res, next) => {\n\n    if(err instanceof GeneralError){\n\n        return res.status(err.getCode()).json({\n            \n            status:\"error\",\n            \n            message:err.message\n        \n        });\n    };\n\n    return res.status(500).json({\n\n        status:\"error\",\n        \n        message: err.message\n    });\n};\n\n\n","services/whole_body_validation_service.js":"import { body, check, oneOf, checkSchema, validationResult } from \"express-validator\";\n\n\n/**\n * \n * @returns customSanitizer\n */\nexport function customSanitizer() {\n\n    return {\n\n        \"customSanitizer\": {\n\n            options: (value, { req, location, path }) => {\n\n                if (req && location && path) {\n\n                    return value.trim();\n\n                }\n            }\n        }\n    }\n}\n\n\n/**\n * @param {String} response_location;\n * @return {Object} Schema_object;\n */\nexport function response_location(response_location) {\n\n    return { \"in\": [response_location] }\n\n};\n\n/**\n * @param {Int} min; minium number of characters required\n * @return {Struct<Map<String,Array<Schema_Objects>>>>}; \n */\nexport function isLength(min) {\n\n    return {\n\n        \"isLength\": {\n\n            \"options\": {\n\n                \"min\": min\n            },\n\n            errorMessage: `This url parameter is less than the required minimum of ${min} characters`\n\n        }\n    }\n};\n\n/**\n * \n * @param {String} country_abbreviation; uppercase \n * @returns {Object}; postal code Object\n */\nexport function isPostalCode(country_abbreviation) {\n\n    return {\n\n        \"isPostalCode\": {\n\n            options: country_abbreviation\n\n        }\n\n    }\n}\n\n\n/**\n * @export\n * @param {String}; [[\"string-item\",\"replace-with\" ]] || [[\" \", \"-\"]]\n * @return {Object}; rtrim Object \n */\nexport function rtrim(map) {\n\n    const options = JSON.parse(map);\n\n    return {\n\n        \"rtrim\": {\n\n            options: options,\n\n        }\n\n    }\n\n}\n/**\n * @export\n * @return {Object} Email Validation Object \n */\nexport function isEmail() {\n\n    return {\n\n        \"isEmail\": {\n\n            bail: true\n\n        }\n\n    }\n\n}\n\n/**\n * @export\n * @return {Object} Exists Validation Object \n */\nexport function exists() {\n\n    return {\n\n        \"exists\": {\n\n            \"errorMessage\": \"This required parameter does not exists\",\n\n            \"option\": true\n\n        }\n\n    }\n\n}\n\n/**\n * @export\n * @return {Object} Empty Validation Object \n */\nexport function isEmpty() {\n\n    return {\n\n        \"isEmpty\": {\n\n            \"negated\": true,\n\n            \"errorMessage\": \"This empty field parameter is required\"\n\n        }\n\n    }\n\n}\n\n/**\n * @export\n * @return {Object} URL Validation Object \n */\nexport function isURL() {\n\n    return {\n\n        \"isURL\": {\n\n            \"errorMessage\": \"This url parameter value is invalid\"\n\n        }\n\n    }\n\n}\n\n\n\nconst validation_elements = {\n\n    in: (body) => response_location(body),\n\n    isEmpty: () => isEmpty(),\n\n    isURL: () => isURL(),\n\n    exists: () => exists(),\n\n    isLength: (len) => isLength(len),\n\n    isEmail: () => isEmail()\n}\n\n\n/**\n * @dec whole body validation for many criteria.\n * @param {Array<String>} param_array\n * @return {Object} response_code_schema_validation_object\n */\nexport function validation_parameters(param_array) {\n\n    const schema_object = {};\n\n    while (param_array.length) {\n\n        const param_object = param_array.shift();\n\n        for (const param_name in param_object) {\n\n            schema_object[param_name] = {};\n\n            for (const validator of param_object[param_name]) {\n\n                Object.assign(schema_object[param_name], validator.includes(\"-\") ?\n\n                    validation_elements[validator.split(\"-\").shift()](validator.split(\"-\").pop()) :\n\n                    validation_elements[validator]());\n\n            }\n\n        }\n\n    }\n\n    return schema_object;\n    \n}\n\n\n\n\n\n\n","unit_tests/param_test.js":"import axios from 'axios';\nimport test from 'simple-test-framework';\nimport { random_data_generator as generate } from '../modules/random_data_generator.js'\n\n\nconst generator_map = {\n    'email': generate.email(),\n    'username': generate.email().split(\"@\").shift(),\n    'age': generate.integer(1, 100),\n    'password': generate.word(5, 10),\n    'name': generate.first(),\n    'first_name': generate.first(),\n    'last_name': generate.last()\n\n}\n\n\n\nfunction* generate_body_params(params) {\n    const body = {};\n    yield JSON.stringify(body)\n    while (params.length) {\n        const param = params.shift();\n        body[param] = \"\";\n        yield JSON.stringify(body);\n        body[param] = generator_map[param]\n        yield JSON.stringify(body);\n    }\n}\n\n\n\n\n\nconst generate_in_sequence = generate_body_params(['email', 'username', 'age', 'name', 'password'])\n\n\n\nasync function parameter_test() {\n\n    test('Test selector error parameter', async (selector_param_test) => {\n\n        const app = express_applications.get(\"app_\");\n\n        selector_param_test.test(\"Test post api errors with missing selector\", async (axios_post_api) => {\n\n            try {\n\n                await axios.post(`${app.name}${app.port}/api`, generate_in_sequence());\n\n            } catch (error) {\n\n                const response = error.response;\n\n                axios_post_api.check(response.status === 400, 'A status of 400');\n\n                axios_post_api.check(response.statusText === 'Bad Request', 'A Status Text of Bad Request');\n\n                axios_post_api.test(\"test the data object for the correct fields\", (post_api_data_response) => {\n\n                    const data = response.data;\n\n                    post_api_data_response.check(data.message === \"bad_request\", 'A message of bad_request');\n\n                    post_api_data_response.test(\"test missing field request\", (post_api_error_response) => {\n\n                        const errors = data.errors;\n\n                        post_api_error_response.check(errors.length === 3, 'The number of errors');\n\n                        post_api_error_response.check(\n                            Boolean(\n                                errors.find(result => result.msg === 'This required parameter does not exists' && result.param === 'selector' && result.location === 'body')\n                            ),\n                            'does not exist error'\n                        );\n\n                        post_api_error_response.check(\n\n                            Boolean(\n                                errors.find(result => result.msg === 'This empty field parameter is required' && result.param === 'selector' && result.location === 'body')\n                            ),\n                            \"Empty field error\"\n                        )\n\n                        post_api_error_response.check(\n                            Boolean(\n                                errors.find(result => result.msg === 'This url parameter is less than the required minimum of 5 characters' && result.param === 'selector' && result.location === 'body')\n                            ),\n                            'The min number of characters, error'\n                        );\n\n                        post_api_error_response.finish();\n\n                    })\n\n                    post_api_data_response.finish();\n\n                })\n\n                axios_post_api.finish();\n\n            }\n\n        });\n\n\n        selector_param_test.test(\"Test post api errors with empty selector parameter\", async (axios_post_api) => {\n\n\n\n            try {\n\n                await axios.post(`${app.name}${app.port}/api`, { url: \"http://youtube.com\", selector: \"\" });\n\n            } catch (error) {\n\n\n                const response = error.response;\n\n                axios_post_api.check(response.status === 400, 'A status of 400');\n\n                axios_post_api.check(response.statusText === 'Bad Request', 'A Status Text of Bad Request');\n\n\n                axios_post_api.test(\"test the data object for the correct fields\", (post_api_data_response) => {\n\n                    const data = response.data;\n\n                    post_api_data_response.check(data.message === \"bad_request\", 'A message of bad_request');\n\n                    post_api_data_response.test(\"test missing field request\", (post_api_error_response) => {\n\n                        const errors = data.errors;\n\n                        post_api_error_response.check(errors.length === 2, 'The number of errors');\n\n\n                        post_api_error_response.check(\n\n                            Boolean(\n                                errors.find(result => result.msg === 'This empty field parameter is required' && result.param === 'selector' && result.location === 'body')\n                            ),\n                            \"Empty field error\"\n                        )\n\n                        post_api_error_response.check(\n                            Boolean(\n                                errors.find(result => result.msg === 'This url parameter is less than the required minimum of 5 characters' && result.param === 'selector' && result.location === 'body')\n                            ),\n                            'The min number of characters, error'\n                        );\n\n                        post_api_error_response.finish();\n\n                    })\n\n                    post_api_data_response.finish();\n\n                })\n\n                axios_post_api.finish();\n\n            }\n\n        });\n\n\n        selector_param_test.test(\"Test post api errors with min number of characters on the selector parameter\", async (axios_post_api) => {\n\n\n\n            try {\n\n                await axios.post(`${app.name}${app.port}/api`, { url: \"http://youtube.com\", selector: \"1234\" });\n\n            } catch (error) {\n\n\n                const response = error.response;\n\n                axios_post_api.check(response.status === 400, 'A status of 400');\n\n                axios_post_api.check(response.statusText === 'Bad Request', 'A Status Text of Bad Request');\n\n\n                axios_post_api.test(\"test the data object for the correct fields\", (post_api_data_response) => {\n\n                    const data = response.data;\n\n                    post_api_data_response.check(data.message === \"bad_request\", 'A message of bad_request');\n\n                    post_api_data_response.test(\"test missing field request\", (post_api_error_response) => {\n\n                        const errors = data.errors;\n\n                        post_api_error_response.check(errors.length === 1, 'The number of errors');\n\n\n                        post_api_error_response.check(\n                            Boolean(\n                                errors.find(result => result.msg === 'This url parameter is less than the required minimum of 5 characters' && result.param === 'selector' && result.location === 'body')\n                            ),\n                            'The min number of characters, error'\n                        );\n\n                        post_api_error_response.finish();\n\n                    })\n\n                    post_api_data_response.finish();\n\n                })\n\n                axios_post_api.finish();\n\n            }\n\n        });\n\n        selector_param_test.finish()\n\n\n    })\n}","unit_tests/unit_tests.js":"\nimport axios from \"axios\";\nimport test from \"simple-test-framework\";\n\nimport { random_data_generator as generate } from \"../modules/random_data_generator.js\"\nimport { express_apps } from \"../config.js\"\n\nconst express_applications = express_apps();\n\nconst app = express_applications.get(\"app_\")\n\n\ntest(\"Test post api body params.\", async (axios_post_api) => {\n\n     try {\n       \n        const response = await axios.post( `${app.name}${app.port}/api` ,{ url: generate.url(\"http\"), selector: ` #${generate.word(5,6)} ` });\n\n        const result = await response.data;\n\n        axios_post_api.check(response.status === 200);\n        \n        axios_post_api.test(\"Test result message is equal to success.\", (post_api_response) => {\n\n            post_api_response.check(result.message === \"ok\", \"An ok message\" );\n\n            post_api_response.finish();\n        })\n\n        axios_post_api.finish();\n\n    } catch (error) {\n\n        console.log(\"error\", error.response);\n\n    }\n\n})\n\n\ntest(\"Test selector error parameter\", \n\n/**\n * \n * @param {Object} selector_param_test Test Object for a detailed response to the client on the errors. \n */\n\nasync (selector_param_test) => {\n\n  const app = express_applications.get(\"app_\");\n\nselector_param_test.test(\"Test post api errors with missing selector\", async (axios_post_api) => {\n       \n        try {\n          \n            await axios.post(`${app.name}${app.port}/api`, { url: generate.url(\"http\") });\n    \n       } catch (error) {\n        \n            \n        const response = error.response;\n         \n            axios_post_api.check(response.status === 400, \"A status of 400\");\n            \n            axios_post_api.check(response.statusText === \"Bad Request\", \"A Status Text of Bad Request\");\n           \n    \n            axios_post_api.test(\"test the data object for the correct fields\", (post_api_data_response) =>{\n            \n                const data = response.data;\n               \n            post_api_data_response.check(data.message === \"bad_request\",\"A message of bad_request\");\n    \n                post_api_data_response.test(\"test missing field request\", (post_api_error_response) => {\n           \n                    const errors = data.errors;\n    \n                    post_api_error_response.check(errors.length === 3, \"The number of errors\" );\n    \n                    post_api_error_response.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This required parameter does not exists\" && result.param === \"selector\" && result.location === \"body\")),\n                            \"does not exist error\");\n    \n                    post_api_error_response.check(\n                        \n                        Boolean(\n                            errors.find(result => result.msg === \"This empty field parameter is required\" && result.param === \"selector\"  && result.location === \"body\")), \"Empty field error\");\n                            \n                    post_api_error_response.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This url parameter is less than the required minimum of 5 characters\"  && result.param === \"selector\"  && result.location === \"body\")),\"The min number of characters, error\");\n                           \n                    post_api_error_response.finish();\n    \n            });\n    \n            post_api_data_response.finish();\n    \n        });\n    \n    axios_post_api.finish();\n    \n       };\n    \n    });\n    \n    \n    selector_param_test.test(\"Test post api errors with empty selector parameter\", async (axios_post_api) => {\n        \n       \n        try {\n          \n            await axios.post(`${app.name}${app.port}/api`, { url: generate.url(\"http\"), selector:\"\" });\n    \n       } catch (error) {\n        \n            \n        const response = error.response;\n         \n            axios_post_api.check(response.status === 400, \"A status of 400\");\n            axios_post_api.check(response.statusText === \"Bad Request\", \"A Status Text of Bad Request\");\n           \n            axios_post_api.test(\"test the data object for the correct fields\", (post_api_data_response) => {\n            \n            const data = response.data;\n               \n            post_api_data_response.check(data.message === \"bad_request\",\"A message of bad_request\");\n    \n                post_api_data_response.test(\"test missing field request\", (post_api_error_response) => {\n           \n                    const errors = data.errors;\n    \n                    post_api_error_response.check(errors.length === 2, \"The number of errors\" );\n    \n                    post_api_error_response.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This empty field parameter is required\" && result.param === \"selector\"  && result.location === \"body\")\n                            ), \"Empty field error\" );\n                            \n                    post_api_error_response.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This url parameter is less than the required minimum of 5 characters\"  && result.param === \"selector\"  && result.location === \"body\")\n                            ), \"The min number of characters, error\" );\n                           \n                    post_api_error_response.finish();\n    \n            });\n    \n            post_api_data_response.finish();\n    \n        });\n    \n        axios_post_api.finish();\n    \n       };\n    \n    });\n       \n    selector_param_test.test(\"Test post api errors with min number of characters on the selector parameter\", async (axios_post_api) => {\n           \n        try {\n          \n            await axios.post(`${app.name}${app.port}/api`, { url: generate.url(\"http\"), selector:`#${generate.word(1,3)}`});\n    \n       } catch (error) {\n        \n            const response = error.response;\n         \n            axios_post_api.check(response.status === 400, \"A status of 400\");\n            \n            axios_post_api.check(response.statusText === \"Bad Request\", \"A Status Text of Bad Request\");\n           \n            axios_post_api.test(\"test the data object for the correct fields\", (post_api_data_response) => {\n            \n            const data = response.data;\n               \n            post_api_data_response.check(data.message === \"bad_request\",\"A message of bad_request\");\n    \n                post_api_data_response.test(\"test missing field request\", (post_api_error_response) => {\n           \n                    const errors = data.errors;\n    \n                    post_api_error_response.check(errors.length === 1, \"The number of errors\" );\n                    \n                    post_api_error_response.check(\n                        Boolean(\n                            errors.find(result => \n                                result.msg === \"This url parameter is less than the required minimum of 5 characters\" && result.param === \"selector\"  && result.location === \"body\")), \"The min number of characters, error\");\n                    \n                                post_api_error_response.finish();\n    \n            });\n    \n            post_api_data_response.finish();\n    \n        });\n    \n    axios_post_api.finish();\n    \n       };\n    \n    });\n\nselector_param_test.finish();\n\n\n});\n\n\n \ntest(\"Test registration body params\", \n/**\n * \n * @param {Object} post_register Test Object for tests without a detailed response to the client on the errors. \n */\nasync (post_register) => {\n\n\n    try {\n\n        const response = await axios.post( `${app.name}${app.port}/register`, { email: generate.email(), username : generate.word(5,9), age : generate.integer(25,45), name : generate.first(), password : generate.word(7,10) } );\n        \n        const result = await response.data;\n\n        post_register.check(response.status === 201);\n        \n        post_register.test(\"response message is equal to success\", (post_register_response) => {\n\n            post_register_response.finish();\n\n        });\n\n        post_register.finish();\n\n    } catch (error) {\n\n        console.log(\"error\", error.response);\n\n    }\n\n})\n\n\n\n","views/api.js":"\nimport { select_user_id_controller } from \"../controllers/api_controller.js\";\n\nimport { validation_parameters } from \"../services/whole_body_validation_service.js\";\nimport {  response  } from \"../services/response_service.js\";\n\n\n/**\n *\n * @returns {Object}; validation schema object\n */\nexport const api_validate = validation_parameters([\n    {\n        \"url\":\n            [\"in-body\", \"isEmpty\", \"isURL\", \"exists\", \"isLength-5\"]\n    },\n    {\n        \"selector\":\n            [\"in-body\", \"isEmpty\", \"exists\", \"isLength-5\"]\n    }\n]);\n\n\nexport async function api(req, res, next) {\n\n     const { status, data } = select_user_id_controller(req, res);\n\n  return  response(res, 200, [\"some data\"]);\n\n}\n","views/index.js":"import {file_system} from \"../modules/file_system.js\";\n\n\nexport async function index(req, res) {\n    \n    const { root_dir, join } = file_system();\n\n    res.status(200)\n        .sendFile( join(root_dir, \"public/index.html\") );\n\n}","views/user.js":"import { buildCheckFunction, check } from \"express-validator\"\n\nimport { response } from \"../services/response_service.js\";\nimport { user_registration_controller } from \"../controllers/user_controller.js\";\n\nconst checkBodyAndQuery = buildCheckFunction(\"body\", \"query\");\n\n/**\n * @dec validate and sanitize with chaining. \n * @returns {Object} validation Object\n */\nexport const user_validate =\n    [\n        check(\"name\").isLength({ min: 3 }).trim().escape(),\n    \n        check(\"email\").exists().isEmail().normalizeEmail(),\n    \n        check(\"age\").isNumeric().trim().escape(),\n    \n        check(\"username\").exists().notEmpty().escape().trim().toLowerCase().isLength({ min: 5 }),\n    \n        check(\"password\").isLength( { min: 8, max: 20 } )\n\n    ];\n\nexport async function user(req, res) {\n\n    const { code, message } = await user_registration_controller(req.body);\n\n    response(res, code, message.data);\n\n};\n\n","router/dynamic_routes/dynamic_routes.js":"import { checkSchema } from \"express-validator\"\n\nimport { multer_image_controller } from \"../../controllers/multer_image_controller.js\";\nimport { validate } from \"../../services/response_service.js\"\n\nimport { api_validate, api } from \"../../views/api.js\";\nimport { user_validate, user } from \"../../views/user.js\";\n\n\n/**\n * \n * @param {Object} app application Object \n */\nexport default async function dynamic_routes(app) {\n\n    // app.get(\"/\", index_view);\n    app.get(\"/\", (req, res) => {\n        \n        res.render(\"home\")\n\n    })\n\n    multer_image_controller(app, \"/images\", 10000000, [\"jpg\", \"jpeg\", \"png\"], \"public/images\", \"profile\")\n\n    app.post(\"/api\", checkSchema(api_validate), validate, api)\n         \n    app.post(\"/register\", user_validate, validate, user)\n\n}","router/static_routes/static_routes.js":"\nimport serve_static from \"serve-static\";\n\nimport {file_system} from \"../../modules/file_system.js\"\nconst {  root_dir, join } = file_system();\n\nexport default async function static_routes(app){\n     \n    app.use(serve_static(join(root_dir,\"public\"), {maxAge:\"1d\"}));\n\n    app.use(serve_static(join(root_dir,\"public\")));\n    app.use(serve_static(join(root_dir,\"node_modules\")));\n    app.use(serve_static(join(root_dir,\"node_modules/axios/dist\")));\n       \n}"}