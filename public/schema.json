{"A_Code_Walk_Talking_Points.md":"/* \n\nA Code Walk with Hasan Seirafi.\n\nA Code Walk Summary \n\nTalking Points\n\n1.\tServer Architecture MVC\n\n2.\tJSON models \n\t\n    1. pros \n\t2. cons \n\n3.\tViews (controls how data flows)\n\n4.\tComposable Controllers (navigable data components) \n\t\n    1. pros\n\t2. cons\n\n5. \tDynamic and static Routing\n\n6.  Single Purpose Services\n\n7. \tTest First Based Development\n\n8.  Scaling a web crawling service (and other time limited services)\n \n*/\n\n\n\n/*\n\n1. How many calls are we expecting every hour on avg?\n\n1. Is it reasonable for the server to take 500ms to fulfill a request?\n    1. Is there more than one instance of the capture service running? \n    2. Do we round robin our request to each server, or are we using a more sophisticated algorithm?  \n\n1. Is registration required to use the service?\n    1. Is this a tiered service? Can categories of users access higher-quality images and options?\n    2. Would this be a factor in lowering the average latency? \n\n1. Are we caching requests? \n    1. What caching algorithm will be most appropriate for this use case? \n    2. Do we expect the assets associated with any request to change over time?\n    3. If we cache, will caches expire after some time?\n\n1. Are we validating the perimeters? \n    2. Does there need to be a valid URL and CSS selector? \n    3. Do we always return a success call with a failed 1x1 pixel image, \n       irrespective of the validity of the input parameters? \n\n*/","app.js":"import express from \"express\";\n\nimport router from \"./router/router.js\";\n\nimport { Load_Balancer } from \"./services/load_balancer.js\";\n\nimport { create_tables } from \"./services/database_services.js\";\n\nimport { application_service } from \"./services/application_service.js\";\n\nimport { express_apps, pivot_server, database_tables } from \"./config.js\";\n\n\nasync function start_server() {\n\n    await create_tables(database_tables);\n\n    const applications = express_apps();\n\n    for (const application of applications) {\n        \n        const app = express();\n\n        const [app_name, host] = application;\n        \n        application_service(app_name, app);\n\n        app.listen(host.port);\n\n        router(app);\n    }\n\n    const balancer = new Load_Balancer( Object.values(applications).map( app => app.name + app.host), pivot_server.name, pivot_server.port );\n\n    balancer.start();\n\n}\n\nstart_server();\n","config.js":"import dot from \"dotenv\";\n/**\n * \n * @returns {Map<String, Number>} name, port\n */\nexport const database_tables = [\"users\", \"logs\"];\n\nexport const pivot_server = {\n\n    name:\"http://localhost:\", \n\n    port:9000\n};\n\nexport function express_apps() {\n\n    const env = dot.config().parsed;\n\n    const port = process.env.PORT || env.Port || 8080;\n\n    const express_apps = new Map([ \n        [ \"app_\", \n        { \n        name: \"http://localhost:\",\n         \n        port : (port || 8080)\n\n        } \n        ]  \n    ]);\n\n    return express_apps;\n\n}\n\n","controllers/capturama_controller.js":"import axios from \"axios\";\n\nimport { join } from \"path\";\n\nimport { error_logging_service } from \"../services/error_logging_service.js\";\n\nimport { get_vendor_services } from \"../modules/file_system.js\";\nimport { file_system } from \"../modules/file_system.js\";\n\nconst { file_name } = file_system();\n/**\n * \n * @desc  capturama controller handles all capturama errors codes 4XX / 5XX and error logs them.\n * @param { Object } res; \n * @param { Object } req; \n * @returns { Object {api_name, status_code, data } };\n *  \n */\nexport async function capture_image(req, res) {\n\nconst capturama_service = (await get_vendor_services('imaging_vendors')).capturama_service;\n\n    const { body } = req;\n\n    try {\n\n        const result = await axios.post(capturama_service.api_url, body);\n\n        const { status, data } = result;\n        const { image_url } = data;\n\n        return {\n\n            api_name: capturama_service.name,\n\n            status: status,\n\n            data: image_url\n\n        };\n\n    } catch (error) {\n\n         error_logging_service(error.code, \n\n            {\n            \n                file_name: file_name, \n            \n                error: error\n            \n            });\n\n        return {\n\n            api_name: capturama_service.name,\n\n            status: 200,\n\n            data: {\n\n                msg: \"205\",\n\n                image_url: [ join( capturama_service.base_url, \"205.png\" ) ]\n\n            }\n\n        };\n\n    }\n\n}\n","controllers/capturama_stats_controller.js":"import { DB } from \"../services/database_services.js\";\nimport { success, errors } from \"../services/response_service.js\";\nimport { error_logging_service } from \"../services/error_logging_service.js\";\nimport { file_system } from \"../modules/file_system.js\";\n\nconst { file_name } = file_system();\n/**\n * \n * @dec adds a user into a users json file\n * @param { Object } res \n * @param { Object } req \n * @returns { Object } {code:201, message:{data:`${username} created`}}\n */\nexport async function activity_stats_controller(req, res) {\n\n  try {\n    \n    await DB.get_table(\"logs\");\n\n  const capturama_data =  DB.table.filter(file => file.api === \"capturama\")\n  .map((record, id ) => { record.id= id; return record; } );\n\n    const data = { \n    \n        api : \"capturama\",\n\n        \"total_records\" : capturama_data.length, \n        \n        data : capturama_data \n    \n      };\n\nres.status(200).json(success(\"success\", data, 200));\n\n  } catch(error) {\n\n    error_logging_service( error.status, \n      \n      {\n      \n      file_name: file_name, \n      \n      error: error\n    \n      } );\n\n    res.status(500).json(errors(\"internal server error\", 500));\n\n  }\n\n}\n\n\n","controllers/user_controller.js":"import { DB } from \"../services/database_services.js\";\nimport { file_system } from \"../modules/file_system.js\";\n\nconst {file_name} = file_system();\n/**\n * \n * @dec adds a user into a users json file\n * @param { Object } res \n * @param { Object } req \n * @returns { Object } {code:201, message:{data:`${username} created`}}\n */\nexport async function user_registration_controller({ name, email, username, password }) {\n\n  try {\n    \n    await DB.get_table(\"users\");\n\n    const id = DB.table.length;\n\n    DB.table.push({ \n    \n      id: id, \n\n      name: name, \n      \n      email, \n      \n      username, \n      \n      password \n    \n    });\n    \n    const success = await DB.save();\n    \n    if (success) {\n\n      return { \n      \n        code: 201, \n      \n        message: { \n      \n          data: `${username} created` \n      \n        } \n      \n      };\n    \n    };\n\n  } catch (error) {\n\n    error_logging_service( error.status, \n      \n      {\n      \n          file_name: file_name, \n      \n          error: error\n      \n      });\n\n\n    return { \n    \n      code: 500,\n    \n      message: \n\n       { \n       \n        data: error \n      \n      } \n    \n    };\n  \n  }\n\n}\n\n\n","db/error_log.txt":"{\n    \"type\": \"ERR_BAD_REQUEST\",\n    \"date\": 1661022339745,\n    \"data\": {\n        \"file_name\": \"file:///home/gojos_api/modules/file_system.js\",\n        \"error\": {\n            \"message\": \"Request failed with status code 400\",\n            \"name\": \"AxiosError\",\n            \"config\": {\n                \"transitional\": {\n                    \"silentJSONParsing\": true,\n                    \"forcedJSONParsing\": true,\n                    \"clarifyTimeoutError\": false\n                },\n                \"transformRequest\": [\n                    null\n                ],\n                \"transformResponse\": [\n                    null\n                ],\n                \"timeout\": 0,\n                \"xsrfCookieName\": \"XSRF-TOKEN\",\n                \"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n                \"maxContentLength\": -1,\n                \"maxBodyLength\": -1,\n                \"env\": {},\n                \"headers\": {\n                    \"Accept\": \"application/json, text/plain, */*\",\n                    \"Content-Type\": \"application/json\",\n                    \"User-Agent\": \"axios/0.27.2\",\n                    \"Content-Length\": 40\n                },\n                \"method\": \"post\",\n                \"url\": \"https://capture-image.herokuapp.com/capture\",\n                \"data\": \"{\\\"url\\\":\\\"http://kyrfhiwmfz.cy/mwmhpmkop\\\"}\"\n            },\n            \"code\": \"ERR_BAD_REQUEST\",\n            \"status\": 400\n        }\n    }\n}\n{\n    \"type\": \"ERR_BAD_RESPONSE\",\n    \"date\": 1661022371914,\n    \"data\": {\n        \"file_name\": \"file:///home/gojos_api/modules/file_system.js\",\n        \"error\": {\n            \"message\": \"Request failed with status code 503\",\n            \"name\": \"AxiosError\",\n            \"config\": {\n                \"transitional\": {\n                    \"silentJSONParsing\": true,\n                    \"forcedJSONParsing\": true,\n                    \"clarifyTimeoutError\": false\n                },\n                \"transformRequest\": [\n                    null\n                ],\n                \"transformResponse\": [\n                    null\n                ],\n                \"timeout\": 0,\n                \"xsrfCookieName\": \"XSRF-TOKEN\",\n                \"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n                \"maxContentLength\": -1,\n                \"maxBodyLength\": -1,\n                \"env\": {},\n                \"headers\": {\n                    \"Accept\": \"application/json, text/plain, */*\",\n                    \"Content-Type\": \"application/json\",\n                    \"User-Agent\": \"axios/0.27.2\",\n                    \"Content-Length\": 89\n                },\n                \"method\": \"post\",\n                \"url\": \"https://capture-image.herokuapp.com/capture\",\n                \"data\": \"{\\\"url\\\":\\\"https://ourworldindata.org/world-population-growth\\\",\\\"selector\\\":\\\".article-titles\\\"}\"\n            },\n            \"code\": \"ERR_BAD_RESPONSE\",\n            \"status\": 503\n        }\n    }\n}","db/logs.json":"[\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660774038867,\n        \"id\": 0\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660774101885,\n        \"id\": 1\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660774120881,\n        \"id\": 2\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_1.png\"\n        ],\n        \"date\": 1660774184481,\n        \"id\": 3\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_2.png\"\n        ],\n        \"date\": 1660774272042,\n        \"id\": 4\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_3.png\"\n        ],\n        \"date\": 1660774361026,\n        \"id\": 5\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_4.png\"\n        ],\n        \"date\": 1660774417858,\n        \"id\": 6\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_5.png\"\n        ],\n        \"date\": 1660774436903,\n        \"id\": 7\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_6.png\"\n        ],\n        \"date\": 1660774574741,\n        \"id\": 8\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_7.png\"\n        ],\n        \"date\": 1660774632280,\n        \"id\": 9\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660774661370,\n        \"id\": 10\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660774661381,\n        \"id\": 11\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_1.png\"\n        ],\n        \"date\": 1660869996146,\n        \"id\": 12\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660870023597,\n        \"id\": 13\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660870023603,\n        \"id\": 14\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_1.png\"\n        ],\n        \"date\": 1660870712860,\n        \"id\": 15\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660870754291,\n        \"id\": 16\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_1.png\"\n        ],\n        \"date\": 1660870791224,\n        \"id\": 17\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660870795600,\n        \"id\": 18\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_1.png\"\n        ],\n        \"date\": 1660870887257,\n        \"id\": 19\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_2.png\"\n        ],\n        \"date\": 1660870889936,\n        \"id\": 20\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660870924247,\n        \"id\": 21\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660871008637,\n        \"id\": 22\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660871038798,\n        \"id\": 23\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1660871040246,\n        \"id\": 24\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1661022339748,\n        \"id\": 25\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": [\n            \"https://capture-image.herokuapp.com/image_1.png\"\n        ],\n        \"date\": 1661022342406,\n        \"id\": 26\n    },\n    {\n        \"api\": \"capturama\",\n        \"status\": 200,\n        \"data\": {\n            \"msg\": \"205\",\n            \"image_url\": [\n                \"https:/capture-image.herokuapp.com/205.png\"\n            ]\n        },\n        \"date\": 1661022371921,\n        \"id\": 27\n    }\n]","db/users.json":"[{\"id\":0,\"name\":\"Timothy\",\"email\":\"p.nwtgioalp@pxuzhr.ve\",\"username\":\"tndurzvmo\",\"password\":\"jwhzdmsxe\"},{\"id\":1,\"name\":\"Sharon\",\"email\":\"b.sjgelmcm@mpsnpwuxvp.ch\",\"username\":\"txmkn\",\"password\":\"vcquxayjv\"},{\"id\":2,\"name\":\"William\",\"email\":\"v.mfoit@uumbnln.hr\",\"username\":\"nvtejem\",\"password\":\"pbqverjnm\"},{\"id\":3,\"name\":\"Frank\",\"email\":\"k.fuyqvcrnc@hsmm.cc\",\"username\":\"waraqb\",\"password\":\"bgxjfynk\"},{\"id\":4,\"name\":\"Eric\",\"email\":\"t.doh@lwuj.gov.cn\",\"username\":\"sjyvgz\",\"password\":\"tvjokycnuo\"},{\"id\":5,\"name\":\"Charles\",\"email\":\"i.oku@nkmevw.se\",\"username\":\"bkntsjy\",\"password\":\"echyfgcyr\"},{\"id\":6,\"name\":\"Sharon\",\"email\":\"o.nxpfih@fzkg.vg\",\"username\":\"osdznsqr\",\"password\":\"ejdvugyq\"},{\"id\":7,\"name\":\"Helen\",\"email\":\"c.ehks@ikhveiyb.pl\",\"username\":\"sjpxwixvt\",\"password\":\"kgdfdmolz\"},{\"id\":8,\"name\":\"Edward\",\"email\":\"v.uwfbfwkyp@ldwsvizxge.fk\",\"username\":\"eafmio\",\"password\":\"lustqtvbg\"},{\"id\":9,\"name\":\"Susan\",\"email\":\"y.nugobym@umtsx.sy\",\"username\":\"fkdmwylm\",\"password\":\"sjmkfgio\"},{\"id\":10,\"name\":\"Jessica\",\"email\":\"x.pywjbvbo@ubmem.ht\",\"username\":\"iunadywo\",\"password\":\"oiflbrmy\"},{\"id\":11,\"name\":\"Sharon\",\"email\":\"g.ehmpegi@jnhexfl.gm\",\"username\":\"qgekd\",\"password\":\"yeogwvwdc\"},{\"id\":12,\"name\":\"Melissa\",\"email\":\"p.ofyv@sqlm.gy\",\"username\":\"cgrbtu\",\"password\":\"ejbfsieeq\"},{\"id\":13,\"name\":\"Larry\",\"email\":\"u.vsftu@jvoprunw.id\",\"username\":\"lechwgcj\",\"password\":\"qzuoieufc\"},{\"id\":14,\"name\":\"Elizabeth\",\"email\":\"v.lqwjbv@twmrb.sd\",\"username\":\"cqbuxhpvw\",\"password\":\"ywypgldmo\"},{\"id\":15,\"name\":\"Steven\",\"email\":\"p.fvmo@jolfkxo.info\",\"username\":\"svgrwsr\",\"password\":\"nrpqjfbj\"},{\"id\":16,\"name\":\"Patricia\",\"email\":\"b.dhjtvnuji@gpjbpp.de\",\"username\":\"qijgwn\",\"password\":\"vwhsiylhyl\"},{\"id\":17,\"name\":\"Angela\",\"email\":\"e.tqifvypiro@wahbhpkfs.fo\",\"username\":\"mjycts\",\"password\":\"dccfdgtvv\"},{\"id\":18,\"name\":\"Scott\",\"email\":\"b.kxxwjc@hsio.bm\",\"username\":\"bniowflkb\",\"password\":\"gfovejfyxl\"},{\"id\":19,\"name\":\"Anna\",\"email\":\"k.jdfime@cehbiv.mil\",\"username\":\"xdhbwt\",\"password\":\"offfculb\"},{\"id\":20,\"name\":\"Jennifer\",\"email\":\"j.gadbt@tajtngurn.pa\",\"username\":\"eyfzmlig\",\"password\":\"fhjwyqfs\"},{\"id\":21,\"name\":\"Betty\",\"email\":\"u.ndxqy@odunkkn.se\",\"username\":\"fyfskbir\",\"password\":\"hkchghrsm\"},{\"id\":22,\"name\":\"Donna\",\"email\":\"q.hbcc@jwke.li\",\"username\":\"etsmkux\",\"password\":\"mcokeeor\"},{\"id\":23,\"name\":\"Patricia\",\"email\":\"u.xnlrkju@ojypt.lt\",\"username\":\"neuoglxvu\",\"password\":\"hpfhhpnsa\"},{\"id\":24,\"name\":\"Robert\",\"email\":\"w.fvi@cbsaln.nf\",\"username\":\"ykzvrjvkl\",\"password\":\"osbjkkvhk\"},{\"id\":25,\"name\":\"Elizabeth\",\"email\":\"m.idhg@utmntiw.bv\",\"username\":\"nutrn\",\"password\":\"izmjhxyyj\"},{\"id\":26,\"name\":\"Ruth\",\"email\":\"h.hduwsyc@csbudcc.bv\",\"username\":\"ijcrw\",\"password\":\"omdvgaxiwm\"},{\"id\":27,\"name\":\"Betty\",\"email\":\"u.wbewiqw@cdw.ba\",\"username\":\"wurheju\",\"password\":\"qeuqeige\"},{\"id\":28,\"name\":\"Frank\",\"email\":\"j.kyoiqsdmsn@yfmfdh.au\",\"username\":\"ppxftq\",\"password\":\"iyooegil\"},{\"id\":29,\"name\":\"Matthew\",\"email\":\"n.bgxwc@wdur.pk\",\"username\":\"pdnrk\",\"password\":\"lnclggkxj\"},{\"id\":30,\"name\":\"Amy\",\"email\":\"w.uipcvt@ipvml.sg\",\"username\":\"odlvyt\",\"password\":\"drfduvicw\"},{\"id\":31,\"name\":\"James\",\"email\":\"h.wciribpbc@xtm.us\",\"username\":\"xhjrvzyej\",\"password\":\"iprjdntzb\"},{\"id\":32,\"name\":\"Kevin\",\"email\":\"y.ngexxpa@dsgtpv.mh\",\"username\":\"txmmvvf\",\"password\":\"khpsyepsdu\"},{\"id\":33,\"name\":\"Charles\",\"email\":\"s.veludltnyy@epuxt.no\",\"username\":\"hmfhrpgl\",\"password\":\"kjuepjuv\"},{\"id\":34,\"name\":\"Helen\",\"email\":\"i.rbslp@tti.si\",\"username\":\"yikqfcc\",\"password\":\"fianihxbg\"},{\"id\":35,\"name\":\"Angela\",\"email\":\"e.enfgo@bkbr.sn\",\"username\":\"wmvkyz\",\"password\":\"vuhvnqlvbe\"},{\"id\":36,\"name\":\"Gary\",\"email\":\"y.orfjnlo@neuogdb.ev\",\"username\":\"zxwgpf\",\"password\":\"qwcriffq\"},{\"id\":37,\"name\":\"William\",\"email\":\"v.uwyrpdmmnr@vwsydyl.mw\",\"username\":\"zizkinw\",\"password\":\"usfpggrope\"},{\"id\":38,\"name\":\"Donna\",\"email\":\"j.bwjvssolc@vlunsle.bt\",\"username\":\"hudtixb\",\"password\":\"gqddyxpu\"},{\"id\":39,\"name\":\"Frank\",\"email\":\"f.baiflk@tcdz.pe\",\"username\":\"vobbmiou\",\"password\":\"bmonojatq\"},{\"id\":40,\"name\":\"Scott\",\"email\":\"q.lzy@exffn.cu\",\"username\":\"mbhxttl\",\"password\":\"yhvqcvfjvq\"},{\"id\":41,\"name\":\"Laura\",\"email\":\"c.goqyphgei@vifa.pf\",\"username\":\"fftlkfvf\",\"password\":\"jkfxvgqd\"},{\"id\":42,\"name\":\"Eric\",\"email\":\"o.npyrfx@vkithswp.hn\",\"username\":\"cixqaxky\",\"password\":\"prcspxwft\"},{\"id\":43,\"name\":\"Carol\",\"email\":\"w.eskeqxj@imurilevxf.sg\",\"username\":\"heaotbx\",\"password\":\"jhwaviqpy\"},{\"id\":44,\"name\":\"Richard\",\"email\":\"g.pniutw@xyijsuxwv.tp\",\"username\":\"mpirmb\",\"password\":\"ffuliokdpu\"},{\"id\":45,\"name\":\"Frank\",\"email\":\"l.yza@jfcqfx.cm\",\"username\":\"rkbcch\",\"password\":\"xcioctcbds\"},{\"id\":46,\"name\":\"Shirley\",\"email\":\"j.heonlf@hixbk.gi\",\"username\":\"mkjxsvy\",\"password\":\"jqrjkhil\"},{\"id\":47,\"name\":\"Mary\",\"email\":\"i.rblrbzqc@dbzhiib.bs\",\"username\":\"okdabgf\",\"password\":\"nbfbtkeet\"},{\"id\":48,\"name\":\"Anthony\",\"email\":\"b.wbsnaoyj@bfop.ec\",\"username\":\"ilnrwuhak\",\"password\":\"kzotiuyhf\"},{\"id\":49,\"name\":\"Kenneth\",\"email\":\"u.sbonnsmep@lxdrnakpki.fj\",\"username\":\"kyfesjsb\",\"password\":\"xhcgvytsqj\"},{\"id\":50,\"name\":\"Melissa\",\"email\":\"v.lrfvc@oalvogtn.tv\",\"username\":\"cexbaexsw\",\"password\":\"qucteqnfpz\"},{\"id\":51,\"name\":\"Gary\",\"email\":\"i.uptvspw@arxpdajn.gi\",\"username\":\"issnyprc\",\"password\":\"shyowvwe\"},{\"id\":52,\"name\":\"Richard\",\"email\":\"o.ydpwqdvrmv@eph.tc\",\"username\":\"mohgz\",\"password\":\"fjvsmtkxs\"},{\"id\":53,\"name\":\"Sandra\",\"email\":\"c.iljwyw@ucxndhds.gt\",\"username\":\"aogtojogy\",\"password\":\"kxoycgmmc\"},{\"id\":54,\"name\":\"Michelle\",\"email\":\"v.ftqywy@kjbghf.ec\",\"username\":\"bjvwugg\",\"password\":\"nacajdva\"},{\"id\":55,\"name\":\"Ruth\",\"email\":\"a.sbtgkf@vkvjdgpd.ky\",\"username\":\"cmcxvlc\",\"password\":\"ougtdzkh\"},{\"id\":56,\"name\":\"Amy\",\"email\":\"w.iklfn@tobrvk.uy\",\"username\":\"tvswlhyn\",\"password\":\"swnhjtqu\"},{\"id\":57,\"name\":\"Brian\",\"email\":\"r.vgyoryai@ynnbqnyk.mc\",\"username\":\"fwtfjgnw\",\"password\":\"dnevgymibk\"},{\"id\":58,\"name\":\"David\",\"email\":\"q.grfmceyn@qsz.tp\",\"username\":\"aeurkjq\",\"password\":\"auofblenk\"},{\"id\":59,\"name\":\"Scott\",\"email\":\"k.nzlnnrvs@fwnw.do\",\"username\":\"vdxgwfubm\",\"password\":\"sdnyzjzyyt\"},{\"id\":60,\"name\":\"Gary\",\"email\":\"p.flae@qfygujgnz.cn\",\"username\":\"iehzwy\",\"password\":\"iqxoapwq\"},{\"id\":61,\"name\":\"Kimberly\",\"email\":\"v.qdgmp@fiybvunx.cc\",\"username\":\"ltenc\",\"password\":\"bfpdewsd\"},{\"id\":62,\"name\":\"George\",\"email\":\"f.artlbxl@haht.tv\",\"username\":\"qjiouqrim\",\"password\":\"owgvpkxuo\"},{\"id\":63,\"name\":\"Dorothy\",\"email\":\"q.lwv@jfbcgqb.gw\",\"username\":\"hrkqnl\",\"password\":\"spujjygo\"},{\"id\":64,\"name\":\"William\",\"email\":\"d.dlktsg@bqnkd.km\",\"username\":\"qmfkdbzd\",\"password\":\"wndfoaubj\"},{\"id\":65,\"name\":\"Matthew\",\"email\":\"n.gqctq@mnyoz.ci\",\"username\":\"kdrxew\",\"password\":\"wvjyfifzx\"},{\"id\":66,\"name\":\"Sarah\",\"email\":\"b.rvbidj@ssvypprw.hu\",\"username\":\"oforcax\",\"password\":\"ivuapckfe\"},{\"id\":67,\"name\":\"Karen\",\"email\":\"g.gptuyupeb@klw.sg\",\"username\":\"yjtft\",\"password\":\"dpbvljzd\"},{\"id\":68,\"name\":\"Melissa\",\"email\":\"r.vvyirjxig@cydhl.bz\",\"username\":\"jysguf\",\"password\":\"dgeojpyj\"},{\"id\":69,\"name\":\"Sandra\",\"email\":\"u.ddnq@eyltbsrly.ga\",\"username\":\"bcqiizy\",\"password\":\"lcweiykc\"},{\"id\":70,\"name\":\"Brian\",\"email\":\"f.mmbvhlteyu@kkehuny.ie\",\"username\":\"eqqqly\",\"password\":\"hmcubbnk\"},{\"id\":71,\"name\":\"Sharon\",\"email\":\"y.vkhu@xfyfdwc.mv\",\"username\":\"jkmggkccb\",\"password\":\"nlhmpbbti\"},{\"id\":72,\"name\":\"Gary\",\"email\":\"u.vvxxmjj@rrjgsqg.zr\",\"username\":\"xxntcxk\",\"password\":\"qwlfjnov\"},{\"id\":73,\"name\":\"Timothy\",\"email\":\"j.slby@okipiq.cr\",\"username\":\"juwemlhvf\",\"password\":\"tosifubj\"},{\"id\":74,\"name\":\"George\",\"email\":\"g.hjejhqo@pqnzs.tw\",\"username\":\"jgglx\",\"password\":\"rjkynnigy\"},{\"id\":75,\"name\":\"Linda\",\"email\":\"c.usiufwbolc@fqesn.mw\",\"username\":\"bxhwpsr\",\"password\":\"wisvilgd\"},{\"id\":76,\"name\":\"Patricia\",\"email\":\"d.fjlchxje@epgyp.st\",\"username\":\"dffwp\",\"password\":\"csbagpxdsm\"},{\"id\":77,\"name\":\"Carol\",\"email\":\"g.qjilmk@iciyhf.mx\",\"username\":\"knfsubf\",\"password\":\"pijcgxnelq\"},{\"id\":78,\"name\":\"Steven\",\"email\":\"b.duxd@pjkquy.cv\",\"username\":\"pentws\",\"password\":\"jbhefrxiy\"},{\"id\":79,\"name\":\"Jose\",\"email\":\"b.hnked@hopuqlqk.net\",\"username\":\"isikh\",\"password\":\"suxfdxqp\"},{\"id\":80,\"name\":\"Ronald\",\"email\":\"j.dsvuegyuc@kal.ma\",\"username\":\"gknurrz\",\"password\":\"mnizivjeps\"},{\"id\":81,\"name\":\"Larry\",\"email\":\"y.vjiit@kviknn.nt\",\"username\":\"clnsmj\",\"password\":\"iluewmua\"},{\"id\":82,\"name\":\"Amy\",\"email\":\"o.wvmkg@cpcsnr.ck\",\"username\":\"lbrujvlr\",\"password\":\"imrpyprm\"},{\"id\":83,\"name\":\"Ruth\",\"email\":\"v.xcloajh@mcee.ch\",\"username\":\"wwblx\",\"password\":\"eizednct\"},{\"id\":84,\"name\":\"John\",\"email\":\"s.pedgdiz@qvhbwxnj.ci\",\"username\":\"ubounnvks\",\"password\":\"btwfqnjra\"}]","router/express_config.js":"import express from \"express\";\n\nimport { middleware } from \"../modules/middleware.js\";\nimport { file_system } from \"../modules/file_system.js\";\n\nconst { join, root_dir } = file_system();\n/**\n * \n * @export\n * @param { Object } app; express server instance \n */\nexport default async function express_configuration(app) {\n\n    app.use( express.json() );\n\n    app.use( middleware.compression() );\n\n    app.use( middleware.minify({\n\n        cache: join(root_dir, \"cache\"),\n        uglifyJsModule: middleware.uglifyEs,\n        errorHandler: true,\n        jsMatch: /javascript/,\n        cssMatch: /css/,\n        jsonMatch: /json/,\n        sassMatch: /scss/,\n        lessMatch: /less/,\n        stylusMatch: /stylus/,\n        coffeeScriptMatch: /coffeescript/,\n        \n    }) );\n\n    app.use( middleware.cookie_parser() );\n    \n    app.use( middleware.body_parser.urlencoded(\n\n        { extended: true }\n        \n        ) );\n\n    app.use( middleware.express_session(\n        \n        { \n            secret: \"keyboard cat\", \n            \n            resave: true, \n            \n            saveUninitialized: true }\n        \n        ) );\n\n\n    app.use( middleware.passport.initialize() );\n    app.use( middleware.passport.session() );\n    \n}\n\n","router/router.js":"import express_configuration from \"./express_config.js\";\n\nimport static_routes from \"./static_routes/static_routes.js\";\n\nimport dynamic_routes from \"./dynamic_routes/dynamic_routes.js\";\n\nexport default async function router(app) {\n\nawait express_configuration(app);\n\n    static_routes(app);\n\n    dynamic_routes(app);\n\n}","services/application_service.js":"const application_map = new Map();\n\n/**\n *\n * @desc to initialize more than then express instance\n * @export\n * @param { String } app_name application instance\n * @param { Object } express_instance express app instance\n */\nexport function application_service(app_name, express_instance) {\n\n    application_map.set(app_name, express_instance);\n\n}\n\n/**\n * \n * @desc retrieves the host application from a map of applications \n * @export\n * @param { String } express_app_name \n * @returns { Object } express app instance\n */\nexport function get_application_router(express_app_name) {\n\n    return application_map.get(express_app_name);\n\n}","services/database_services.js":"import { Data_Base } from \"../modules/database_interface.js\";\n\n/**\n * \n * @dsc Instantiates a Data_Base interface before application starts\n * File System Object\n */\nexport let DB;\n \n/**\n * \n * @dsc create tables if they do not exist\n * @param { Array <Strings> } table_names \n */\nexport async function create_tables(table_names) {\n\n    DB = await Data_Base.set_tables(table_names);\n    \n}\n\n\n\n\n","services/error_logging_service.js":"import { file_append } from \"../modules/file_system.js\";\n\n/**\n * @dec logs errors to a file\n * @param { String } error_type; status code | error code\n * @param { Object } data; req Object\n */\nexport async function error_logging_service(error_type, data) {\n\n    try {\n        \n        await file_append(\"db/error_log.txt\", \n\n        JSON.stringify(\n\n        { \n\n        type : error_type,\n     \n        date : Date.now(),\n        \n        data : data\n            \n        }) + '\\n', \n        \n        {\n\n            encoding : \"utf8\" \n        \n        });\n\n    } catch (error) {\n        \n        console.error(error);\n\n        return false;\n\n    }\n\n    return true;\n\n}\n\n\n\n\n","services/load_balancer.js":"import express from \"express\"\nimport request from \"request\"\n\n\nexport class Load_Balancer {\n/**\n * \n * @param { Array <String> } servers   \n * @param { String } host current host\n * @param { Number } port\n */\n        constructor(servers, host, port) {\n\n                this.servers = servers;\n                \n                this.current_server = 0;\n\n                this.pivot_port = port;\n\n                this.pivot = host;\n        \n        }\n        \n        handler(req, res) {\n\n                const _req = request({ url: this.servers[this.current_server] + req.url }).on(\"error\", error => {\n\n                        res.status(500).send(error.message);\n                });\n\n                req.pipe(_req).pipe(res);\n\n                this.current_server = (this.current_server + 1) % this.servers.length;\n\n        }\n        \n        main_route() {\n\n                if (this.servers > 1) {\n\n                        this.pivot = express();\n\n                        this.pivot.get(\"*\", this.handler).post(\"*\", this.handler);\n\n                        this.pivot.listen(this.pivot_port, () => {\n\n                                console.log(`pivot server is listening on ${this.pivot_port}`);\n\n                        });\n                }\n\n        }\n        \n        start(){\n\n         this.main_route();\n\n        }\n\n}","services/logging_services.js":"import { DB } from \"../services/database_services.js\";\n\nimport { error_logging_service } from \"./error_logging_service.js\";\n\nimport { file_system } from \"../modules/file_system.js\";\n\nconst  { file_name } = file_system();\n\n/**\n * \n * @param { String } api_name \n * @param { Object } resulting_status_code \n * @param { Object } data \n * @returns { Boolean } \n */\nexport async function api_logging(api_name, resulting_status_code, data ){\n\n    try {\n        \n        await DB.get_table(\"logs\");\n        \n        const id = DB.table.length;\n        \n        DB.table.push({ \n            \n            api: api_name, \n            \n            status: resulting_status_code,\n            \n            data: data, \n            \n            date: Date.now(),\n            \n            id: id\n        \n        });\n       \n        const success = await DB.save();\n       \n        if (success) {\n            \n            return true;\n\n        }\n    \n    } catch (errors) {\n    \n        error_logging_service( errors.code, \n      \n            {\n            \n            file_name: file_name, \n            \n            error: errors\n          \n            } );\n\n\n        console.error({ \n            \n            message: { \n            \n                data: `${api_name} not logged` \n            \n            }});\n        \n        return false;\n    }\n\n\n}\n\n\n","services/response_service.js":"import { validationResult } from \"express-validator\";\n\nimport { error_logging_service } from \"./error_logging_service.js\";\n\nexport const capturama_status_codes = {\n\n    200: \"success\",\n    \n    205: \"dynamic size selector on page found\",\n    \n    400: \"request is too large\",\n    \n    500: \"internal server error\",\n    \n    504: \"capture did not load in time\"\n    \n    };\n\nexport const validation_codes = { \n\n    200: \"ok\",\n    \n    201: \"ok_created\",\n    \n    202: \"accepted\",\n    \n    304: \"not_modified\",\n    \n    400: \"bad_request\",\n    \n    401: \"unauthorized\",\n    \n    500: \"internal_server_err\"\n    \n    };\n\n\n/**\n *\n * @desc Send success response\n * @export\n * @param { String } msg;\n * @param { Object <Array> } data;\n * @param { Number } status;\n * @return {Object} success Object;\n */\n export function success(msg, data, status) {\n\n    return {\n\n        msg: msg,\n\n        error: false,\n\n        code: status,\n\n         response:data\n\n    }\n};\n\n\n/**\n *\n * @desc send error response\n * @export\n * @param { String } msg;\n * @param { Number } status;\n * @return { Object <String, Number ,Boolean> }; error\n */\n export function errors(msg, status) {\n\n    const codes = [ 401, 404, 403, 422, 500];\n\n    let code;\n\n    while (codes.length) {\n    \n        code = codes.pop();\n    \n        if (code === status) break;\n    \n    }\n    \n    code = code || 500;\n\n    return {\n    \n        msg: msg,\n    \n        code: code,\n    \n        error: true\n    };\n\n} \n\n/**\n * \n * @param { Number } status_code status code\n * @param { Object } data data object \n * @returns \n */\n export async function capturama_response(res, status_code, data){\n  \n    const response_code = capturama_status_codes[status_code];\n    \n\n    try {\n\n        if (response_code) {\n\n            return res.status(status_code).json({ message: capturama_status_codes[status_code], data: data });\n           \n        }\n\n            throw new Error({ type: \"no_code\", date: Date.now(), request: req });\n\n\n    } catch (error) {\n\n        try {\n\n            await error_logging_service(error.type, error.date, error.request);\n\n        } catch (error) {\n\n            console.error(error);\n\n        }\n\n    }\n\n}\n\n/**\n *\n *\n * @export\n * @param { Object } req; request Object\n * @param { Object } res; response Object\n * @param { String } status_code; named status code\n * @param { Object | Array } data; success | error\n */\nexport async function response(res, status_code, data) {\n\n    try {\n\n        if (validation_codes[status_code]) {\n\n            return res.status(status_code).json({ message: validation_codes[status_code], data: data });\n\n        }\n\n            throw new Error({ type: \"no_code\", date: Date.now(), request: req });\n\n    } catch (error) {\n\n        try {\n\n            await error_logging_service(error.type, error.date, error.request);\n\n        } catch (error) {\n\n            console.log(error);\n\n        }\n\n    }\n\n}\n\n/**\n * \n * @param { Object } req; \n * @param { Object } res;\n * @param { Object } next; \n * @returns \n */\nexport function validate(req, res, next) {\n\n    try {\n    \n        validationResult(req).throw();\n\n     if(next){\n\n       return next();\n\n     }\n\n    } catch (errors) {\n\n        return res.status(400).json({message:validation_codes[400], errors: errors.array() });\n\n    }\n\n}\n\nexport class GeneralError extends Error {\n/**\n * \n * \n * @param { String } message; \n */\n    constructor(message){\n\n        super();\n\n        this.message = message;\n    }\n\n    getCode(){\n\n        if(this instanceof BadRequest){\n            \n            return 400;\n\n        }if(this instanceof NotFound){\n            \n            return 404;\n\n        }\n        \n        return 500;\n    }\n\n}\n\nexport class BadRequest extends GeneralError{}\nexport class NotFound extends GeneralError{}\n\nexport const handleErrors = (err,req, res, next) => {\n\n    if(err instanceof GeneralError){\n\n        return res.status(err.getCode()).json({\n            \n            status:\"error\",\n            \n            message:err.message\n        \n        });\n        \n    }\n\n    return res.status(500).json({\n\n        status:\"error\",\n        \n        message: err.message\n        \n    });\n\n};\n\n\n","services/validation_service.js":"/**\n * \n * @returns customSanitizer\n */\nexport function customSanitizer() {\n\n    return {\n\n        \"customSanitizer\": {\n\n            options: (value, { req, location, path }) => {\n\n                if (req && location && path) {\n\n                    return value.trim();\n\n                }\n            }\n        }\n    };\n}\n\n\n/**\n * \n * @param { String } response_location;\n * @return { Object } Schema_object;\n */\nexport function response_location(response_location) {\n\n    return { \"in\": [response_location] };\n\n}\n\n/**\n * \n * @param {Int} min; minium number of characters required\n * @return { Object <Map <String, Array<Schema_Objects>>>>}; \n */\nexport function isLength(min) {\n\n    return {\n\n        \"isLength\": {\n\n            \"options\": {\n\n                \"min\": min\n            },\n\n            errorMessage: `This url parameter is less than the required minimum of ${min} characters`\n\n        }\n    };\n}\n\n/**\n * \n * @param { String } country_abbreviation; uppercase \n * @returns { Object }; postal code Object\n */\nexport function isPostalCode(country_abbreviation) {\n\n    return {\n\n        \"isPostalCode\": {\n\n            options: country_abbreviation\n\n        }\n\n    };\n}\n\n\n/**\n * \n * @export\n * @param { String }; [[\"string-item\",\"replace-with\" ]] || [[\" \", \"-\"]]\n * @return { Object }; rtrim Object \n */\nexport function rtrim(map) {\n\n    const options = JSON.parse(map);\n\n    return {\n\n        \"rtrim\": {\n\n            options: options,\n\n        }\n\n    };\n\n}\n/**\n * \n * @export\n * @return { Object } Email Validation Object \n */\nexport function isEmail() {\n\n    return {\n\n        \"isEmail\": {\n\n            bail: true\n\n        }\n\n    };\n\n}\n\n/**\n * \n * @export\n * @return { Object } Exists Validation Object \n */\nexport function exists() {\n\n    return {\n\n        \"exists\": {\n\n            \"errorMessage\": \"This required parameter does not exists\",\n\n            \"option\": true\n\n        }\n\n    };\n\n}\n\n/**\n * \n * @export\n * @return { Object } Empty Validation Object \n */\nexport function isEmpty() {\n\n    return {\n\n        \"isEmpty\": {\n\n            \"negated\": true,\n\n            \"errorMessage\": \"This empty field parameter is required\"\n\n        }\n\n    };\n\n}\n\n/**\n * \n * @export\n * @return { Object } URL Validation Object \n */\nexport function isURL() {\n\n    return {\n\n        \"isURL\": {\n\n            \"errorMessage\": \"This url parameter value is invalid\"\n\n        }\n\n    };\n\n}\n\n\n\nconst validation_elements = {\n\n    in: (body) => response_location(body),\n\n    isEmpty: () => isEmpty(),\n\n    isURL: () => isURL(),\n\n    exists: () => exists(),\n\n    isLength: (len) => isLength(len),\n\n    isEmail: () => isEmail()\n};\n\n\n/**\n * \n * @dec whole body validation for many criteria.\n * @param { Array <String> } param_array\n * @return { Object } response_code_schema_validation_object\n */\nexport function validation_parameters(param_array) {\n\n    const schema_object = {};\n\n    while (param_array.length) {\n\n        const param_object = param_array.shift();\n\n        for (const param_name in param_object) {\n\n            schema_object[param_name] = {};\n\n            for (const validator of param_object[param_name]) {\n\n                Object.assign(schema_object[param_name], validator.includes(\"-\") ?\n\n                    validation_elements[validator.split(\"-\").shift()](validator.split(\"-\").pop()) :\n\n                    validation_elements[validator]());\n\n            }\n\n        }\n\n    }\n\n    return schema_object;\n    \n}\n\n\n\n\n\n\n","unit_tests/unit_tests.js":"import axios from \"axios\";\n\nimport test from \"simple-test-framework\";\n\nimport { random_data_generator as generate } from \"../modules/random_data_generator.js\"\n\nimport { express_apps } from \"../config.js\"\n\nconst express_applications = express_apps();\n\nconst app = express_applications.get(\"app_\");\n\n\ntest(\"/gojos/metrics get valid table data\", async (data_table) => {\n\n    try {\n      \n       const response = await axios.get( `${app.name}${app.port}/gojos/metrics`);\n\n       const result = await response.data;\n\n       data_table.check(response.status === 200, \"current status\");\n       \n       data_table.test(\"Test resulting data table belongs to capturama\", (table_body) => {\n\n           table_body.check(result.msg === \"success\", \"success message\" );\n           \n           const {api, total_records, data} = result.response;\n           \n           table_body.check(api === 'capturama', \"table name is correct\")\n\n           table_body.finish();\n\n       });\n\n     let t_result =  data_table.finish();\n\n   } catch (error) {\n\n       console.log(\"error\", error.response);\n\n   }\n\n})\n\n\ntest(\"/gojos valid url in post body\", async (url) => {\n\n    try {\n      \n       const response = await axios.post( `${app.name}${app.port}/gojos` ,{ url: \"https://www.dmcinfo.com/latest-thinking/blog/id/9852/multi-user-video-chat-with-webrtc\" });\n\n       const result = await response.data;\n\n       url.check(response.status === 200);\n       \n       url.test(\"Test result message is equal to success.\", (image_response) => {\n\n           image_response.check(result.message === \"success\", \"success message\" );\n\n           image_response.finish();\n       })\n\n       url.finish();\n\n   } catch (error) {\n\n       console.log(\"error\", error.response);\n\n   }\n\n})\n\n\ntest(\"/gojos invalid url test 1x1 pixel 205.png and 200 status.\", async (one_pixel) => {\n\n    try {\n     \n       const response = await axios.post( `${app.name}${app.port}/gojos` ,{ url: generate.url(\"http\") });\n\n       const result = await response.data;\n\n       one_pixel.check(response.status === 200);\n       \n       one_pixel.test(\"Test result message is equal to success. and the resulting image is a 1x1 pixel, a 205.png file\", (err_png) => {\n\n            err_png.check(result.message === \"success\", \"success message\" );\n            \n            const { data } = result;\n            const {image_url} = data;\n            const file_location = image_url.pop();\n           \n            const  file_name_routes = file_location.split(\"/\");\n            const file_name = file_name_routes.pop();\n           \n            err_png.check( file_name === \"205.png\" );\n\n            err_png.finish();\n\n       });\n\n        one_pixel.finish();\n\n   } catch (error) {\n\n        console.log(\"error\", error.response);\n\n   }\n\n});\n\n\ntest(\"/gojos/selector test valid body params post.\", async (all_valid) => {\n\n     try {\n       \n        const response = await axios.post( `${app.name}${app.port}/gojos/selector` ,{ url: \"https://ourworldindata.org/world-population-growth\", selector: \".article-titles\" });\n\n        const result = await response.data;\n\n        all_valid.check(response.status === 200);\n        \n        all_valid.test(\"Test result message is equal to success.\", (body_response) => {\n\n          const {data} = result;\n\n            body_response.check(result.message === 'success', \"success message\" );\n            \n            \n            while(data.length){\n\n                const file = data.pop();\n                \n                body_response.check( !file.includes('205.png'), `${file} is not a 205.png`);\n               \n            }\n             \n            body_response.finish();\n        });\n\n        all_valid.finish();\n\n    } catch (error) {\n\n        console.log(\"error\", error.response);\n\n    }\n\n});\n\n\ntest(\"/gojos/selector test body parameter validation\", \n/**\n * \n * @param {Object} validation Detailed client response on errors. \n */\n\nasync (validation) => {\n\n  const app = express_applications.get(\"app_\");\n\nvalidation.test(\"Test missing selector param\", async (selector) => {\n       \n        try {\n          \n            await axios.post(`${app.name}${app.port}/gojos/selector`, { url: generate.url(\"http\") });\n    \n       } catch (error) {\n            \n        const response = error.response;\n         \n            selector.check(response.status === 400, \"A status of 400\");\n            \n            selector.check(response.statusText === \"Bad Request\", \"A Status Text of Bad Request\");\n           \n            selector.test(\"test the data object for the correct fields\", (field) =>{\n            \n                const data = response.data;\n               \n            field.check(data.message === \"bad_request\",\"A message of bad_request\");\n    \n                field.test(\"test missing field request\", (error_response) => {\n           \n                    const errors = data.errors;\n    \n                    error_response.check(errors.length === 3, \"The number of errors\" );\n    \n                    error_response.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This required parameter does not exists\" && result.param === \"selector\" && result.location === \"body\")),\n                            \"does not exist error\");\n    \n                    error_response.check(\n                        \n                        Boolean(\n                            errors.find(result => result.msg === \"This empty field parameter is required\" && result.param === \"selector\"  && result.location === \"body\")), \"Empty field error\");\n                            \n                    error_response.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This url parameter is less than the required minimum of 5 characters\"  && result.param === \"selector\"  && result.location === \"body\")),\"The min number of characters, error\");\n                           \n                    error_response.finish();\n    \n            });\n    \n            field.finish();\n    \n        });\n    \n    selector.finish();\n    \n       }\n    \n    });\n    \n    \nvalidation.test(\"/gojos/selector post errors with empty selector parameter\", async (empty_selector) => {\n        \n       \n        try {\n          \n            await axios.post(`${app.name}${app.port}/gojos/selector`, { url: generate.url(\"http\"), selector:\"\" });\n    \n       } catch (error) {\n        \n            \n        const response = error.response;\n         \n            empty_selector.check(response.status === 400, \"A status of 400\");\n\n            empty_selector.check(response.statusText === \"Bad Request\", \"A Status Text of Bad Request\");\n           \n            empty_selector.test(\"Test the data object for the correct fields\", (field) => {\n            \n            const data = response.data;\n               \n            field.check(data.message === \"bad_request\",\"A message of bad_request\");\n    \n                field.test(\"test missing field request\", (field_body) => {\n           \n                    const errors = data.errors;\n    \n                    field_body.check(errors.length === 2, \"The number of errors\" );\n    \n                    field_body.check(\n\n                        Boolean(\n                            errors.find(result => result.msg === \"This empty field parameter is required\" && result.param === \"selector\"  && result.location === \"body\")\n                            ), \"Empty field error\" );\n                            \n                    field_body.check(\n                        Boolean(\n                            errors.find(result => result.msg === \"This url parameter is less than the required minimum of 5 characters\"  && result.param === \"selector\"  && result.location === \"body\")\n                            ), \"The min number of characters, error\" );\n                           \n                    field_body.finish();\n    \n            });\n    \n            field.finish();\n    \n        });\n    \n        empty_selector.finish();\n    \n       }\n    \n    });\n       \n    validation.test(\"/gojos/selector errors with min number of characters \", async (min_character_check) => {\n           \n        try {\n          \n            await axios.post(`${app.name}${app.port}/gojos/selector`, { url: generate.url(\"http\"), selector:`#${generate.word(1,3)}`});\n    \n       } catch (error) {\n        \n            const response = error.response;\n         \n            min_character_check.check(response.status === 400, \"A status of 400\");\n            \n            min_character_check.check(response.statusText === \"Bad Request\", \"A Status Text of Bad Request\");\n           \n            min_character_check.test(\"test the data object for the correct fields\", (field) => {\n            \n            const data = response.data;\n               \n            field.check(data.message === \"bad_request\",\"A message of bad_request\");\n    \n                field.test(\"test missing field request\", (field_body) => {\n           \n                    const errors = data.errors;\n    \n                    field_body.check(errors.length === 1, \"The number of errors\" );\n                    \n                    field_body.check(\n                        Boolean(\n                            errors.find(result => \n                                \n                                result.msg === \"This url parameter is less than the required minimum of 5 characters\" && result.param === \"selector\"  && result.location === \"body\")), \"The min number of characters, error\");\n                    \n                                field_body.finish();\n    \n            });\n    \n            field.finish();\n    \n        });\n    \n    min_character_check.finish();\n    \n       }\n    \n    });\n\nvalidation.finish();\n\n});\n //remove test prior to pushing\ntest(\"/register non detailed response check\", \n/**\n * \n * @param {Object} user_register Test Object for tests without a detailed response to the client on the errors. \n */\nasync (user_register) => {\n\n\n    try {\n\n        const response = await axios.post( `${app.name}${app.port}/register`, { email: generate.email(), username : generate.word(5,9), age : generate.integer(25,45), name : generate.first(), password : generate.word(7,10) } );\n        \n        const result = await response.data;\n\n        user_register.check(response.status === 201);\n        \n        user_register.test(\"response message is equal to success\", (post_register_response) => {\n\n            post_register_response.finish();\n\n        });\n\n       user_register.finish();\n\n    } catch (error) {\n\n        console.log(\"error\", error.response);\n\n    }\n\n});\n\n\n\n","vender_services/imaging_vendors.json":"{\n    \n    \"capturama_service\": \n    \n    {\n\n        \"name\": \"capturama\",\n\n        \"base_url\": \"https://capture-image.herokuapp.com/\",\n    \n        \"api_url\": \"https://capture-image.herokuapp.com/capture\",\n        \n        \"Capturama_Access_Token\":\"IeRVAxA8w6\"\n        \n    }   \n\n}","views/gojos.js":"\nimport { capture_image } from \"../controllers/capturama_controller.js\";\n\nimport { api_logging } from \"../services/logging_services.js\";\nimport { validation_parameters } from \"../services/validation_service.js\";\nimport { capturama_response } from \"../services/response_service.js\";\n\nimport { activity_stats_controller } from \"../controllers/capturama_stats_controller.js\"; \n\nexport const gojos = {\n    /**\n     *\n     * @returns {Object}; validation schema object\n     */\n    validate: validation_parameters([\n        {\n            \"url\" : [\"in-body\", \"isEmpty\", \"isURL\", \"exists\", \"isLength-5\"]\n        }\n    ]),\n\n\n    async handel(req, res, next) {\n\n        const { api_name, status, data } = await capture_image(req, res);\n\n        await api_logging(api_name, status, data);\n\n        return capturama_response(res, status, data);\n\n    }\n\n};\n\nexport const gojos_selector = {\n    /**\n     *\n     * @returns {Object}; validation schema object\n     */\n    validate: validation_parameters([\n        {\n            \"url\":\n                [\"in-body\", \"isEmpty\", \"isURL\", \"exists\", \"isLength-5\"]\n        },\n        {\n            \"selector\":\n                [\"in-body\", \"isEmpty\", \"exists\", \"isLength-5\"]\n        }\n    ]),\n\n\n    async handel(req, res, next) {\n\n        const { api_name, status, data } = await capture_image(req, res);\n\n        await api_logging(api_name, status, data);\n\n        return capturama_response(res, status, data);\n\n    }\n\n};\n\n\nexport const gojos_metrics = {\n\n    async handel(req, res, next){\n\n        activity_stats_controller(req, res);\n\n    }\n\n};","views/user.js":"import { buildCheckFunction, check } from \"express-validator\";\n\nimport { response } from \"../services/response_service.js\";\n\nimport { user_registration_controller } from \"../controllers/user_controller.js\";\n\nconst checkBodyAndQuery = buildCheckFunction(\"body\", \"query\");\n\n/**\n * @dec validate and sanitize with chaining. \n * @returns { Object } validation Object\n */\nexport const user_validate =\n    [\n        check(\"name\").isLength({ min: 3 }).trim().escape(),\n    \n        check(\"email\").exists().isEmail().normalizeEmail(),\n    \n        check(\"age\").isNumeric().trim().escape(),\n    \n        check(\"username\").exists().notEmpty().escape().trim().toLowerCase().isLength({ min: 5 }),\n    \n        check(\"password\").isLength( { min: 8, max: 20 } )\n\n    ];\n\nexport async function user(req, res) {\n\n    const { code, message } = await user_registration_controller(req.body);\n\n    response(res, code, message.data);\n\n}\n\n","router/dynamic_routes/dynamic_routes.js":"import { checkSchema } from \"express-validator\";\n\n\nimport { validate } from \"../../services/response_service.js\";\n\nimport { gojos, gojos_selector, gojos_metrics } from \"../../views/gojos.js\";\nimport { user_validate, user } from \"../../views/user.js\";\n\n/**\n * \n * @param {Object} app application Object \n */\nexport default async function dynamic_routes(app) {\n\n\n    app.get(\"/\", (req, res) => {\n        \n        res.render(\"home\");\n\n    });\n\n  \n    app.post(\"/gojos\", checkSchema(gojos.validate), validate, gojos.handel);\n\n    app.post(\"/gojos/selector\", checkSchema(gojos_selector.validate), validate, gojos_selector.handel);\n\n    app.get(\"/gojos/metrics\", gojos_metrics.handel);\n         \n    app.post(\"/register\", user_validate, validate, user);\n\n}","router/static_routes/static_routes.js":"\nimport serve_static from \"serve-static\";\n\nimport { file_system } from \"../../modules/file_system.js\";\n\nconst {  root_dir, join } = file_system();\n\nexport default async function static_routes(app){\n     \n    app.use(serve_static(join(root_dir,\"public\"), \n\n    {\n\n        maxAge : \"1d\"\n\n    }));\n\n    app.use( serve_static(join(root_dir,\"public\")) );\n\n    app.use( serve_static(join(root_dir,\"node_modules/axios/dist\")) );\n       \n}"}